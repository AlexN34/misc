import java.util.Calendar;
import java.util.HashSet;

public class Room {
	private String name;
	private String type;
	private DateData bookedDates;
	// GETTERS AND SETTERS
	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the type
	 */
	public String getType() {
		return type;
	}

	/**
	 * @param type the type to set
	 */
	public void setType(String type) {
		this.type = type;
	}
	
	//Print room contents
	@Override
	public void toString(){
		System.out.print(this.name + " " + "" );
	}

	//CONSTRUCTOR
	public Room(String name, String type) {
		this.name = name;
		this.type = type;
		this.bookedDates = new DateData(new HashSet<Calendar>()); //empty - all rooms start with none booked
	}

	//	HELPER METHODS
	//	Checks whether dates between start and free exists in bookedDates
	public boolean isAvailable(Calendar start, Calendar end) {
	//TODO: Handle incorrect input -- throw exception if end > start?
		Calendar curDate = start;
		while (curDate.compareTo(end) <= 0) {
			if (!this.bookedDates.isAvailable(curDate)) {
				return false;
			}
			curDate.roll(Calendar.DATE, true);
		}
		return true;
		
	}

	public boolean bookRoom(Calendar start, Calendar end) {
		if (isAvailable(start, end)) {
			Calendar curDate = start;
			while (curDate.compareTo(end) <= 0) {
				this.bookedDates.addDate(curDate);
				curDate.roll(Calendar.DATE, true);
			}
			return true; //nothing went wrong if got here
			//TODO perhaps incorporate exception
		} else {
			return false;
		}

	}

	public boolean freeRoom(Calendar start, Calendar end) {
		if(!isAvailable(start, end)) {
			Calendar curDate = start;
			while (curDate.compareTo(end) <= 0) {
				this.bookedDates.removeDate(curDate);
				curDate.roll(Calendar.DATE, true);
			}
			return true; //successfully removed all.
			//TODO: exception?
		} else {
			return false;
		}
	}

}

/*
 * 
 * @startuml
 * Venue *-- Room
 * DateData --* Room
 *  
 *  class Venue {
 *  -List<Room> rooms 
 *  -String name 
 *  + <<constructor>> Venue(room: * List<Room>, name:String) 
 * + getName() : String
 * + addRoom(rooms:Hashtable, r:Room)
 * + delRoom(rooms:Hashtable, r:Room)
 * } 
 * 
 * class Room {
 *  -String name
 *  -String type
 *  -DateData bookedDates
 *  + <<constructor>> Room(name:String, type:String, availabilities:DateData) 
 * + * isAvailable(date:String) : Boolean 
 * + bookRoom(date:String) : String 
 * + * freeRoom(date:String) : String 
 * - setName(name: String) 
 * - setType(type: * String) + getName() : String + getType() : String 
 * }
 * 
 * class DateData { 
 * -Calendar[] bookedDates 
 * +<<constructor>> DateData()
 * +isAvailable(d:Calendar) 
 * +addDate(d:Calendar)
 * +removeDate(d:Calendar)
 * }
 * 
 * 
 * 

 * @enduml
 */