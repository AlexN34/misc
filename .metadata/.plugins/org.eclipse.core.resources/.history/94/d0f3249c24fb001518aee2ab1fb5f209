import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class VenueHireSystem {
	private LinkedHashMap<String, Venue> venues;
	private LinkedHashMap<Action, String> actionResults;

	/* CONSTRUCTORS */
	public VenueHireSystem(LinkedHashMap<String, Venue> venues, LinkedHashMap<Action, String> actionResults) {
		this.venues = venues;
		this.actionResults = actionResults;
	}

	/* GETTERS AND SETTERS BELOW */
	public LinkedHashMap<String, Venue> getVenues() {
		return venues;
	}

	public void setVenues(LinkedHashMap<String, Venue> venues) {
		this.venues = venues;
	}

	public void addVenue(LinkedHashMap<String, Venue> venues, Venue v) {
		venues.put(v.getName(), v);
	}
	
	public Set<String> getVenueNames() {
		return this.venues.keySet();
	}

	public LinkedHashMap<Action, String> getactionResults() {
		return actionResults;
	}

	private void setActionResults(LinkedHashMap<Action, String> actionResults) {
		this.actionResults = actionResults;
	}

	private void addActionResult(Action a, String result) {
		this.actionResults.put(a, result);
	}

	/* ========= HELPER FUNCTIONS ========= */

	/* PARSER FUNCTIONS BELOW */
	private Venue venueParse(String venueString) {
		String[] tokens = venueString.split("\\s");
		Venue v = new Venue(tokens[1]);
/*		TODO: write setName setRoom */
		Room r = new Room(tokens[2], tokens[3]);
		v.addRoom(r);
		return v;
	}

	private Action actionParse(String actionResultstring) {
		String[] tokens = actionResultstring.split("\\s");
		LinkedHashMap<String, Integer> roomTypes = new LinkedHashMap<String, Integer>();
		//put stuff in properly
		Action action = new Action(tokens[0], roomTypes, 0, Calendar.getInstance(), Calendar.getInstance());
		switch (tokens[0]) {
		/*		TODO: FILL IN ONCE CLASSES COMPLETED 
		 *		Request: id, may 26 to may 27, (how many, type 1)+
		 *		Change: id, may 26 to may 27, (how many, type 1)+
		 *		Cancel: id 
		 * */
		case "Request":

			break;
		case "Change":
			break;
		case "Cancel":
			break;

		default:
			break;
		}
		// TODO
		return action;
	}

	// Provides string containing venue that needs to be printed out
	private void printParse(String printString) {
		// TODO: determine return value -- String? what to push onto result queue
		Pattern p = Pattern.compile("^Print\\s(\\w+)");
		Matcher m = p.matcher(printString);
		m.find();
		// System.out.println(m.group(1)); //0th group is everything, 1st is
		// match 1
		// Write a Venue toString function
		/*
		 * for (Venue v: this.venues) { //with array. can use hashtable instead
		 * if (v.name.equals(m.group(1))) { String = venueOutput = v.toString()
		 * } }
		 */

	}

	/* Print VenueHireSystem contents */
	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}

	/* PROCESS ACTION OBJECTS FROM PARSE */
	private String actionResult(Action actionToCheck) {
		return "dummy";
	}

	/* RUNTIME EXECUTABLE CODE */
	public static void main(String[] args) {
		// Initialise system contents as empty lists
		LinkedHashMap<String, Venue> venues = new LinkedHashMap<String, Venue>();
		LinkedHashMap<Action, String> actionResults = new LinkedHashMap<Action, String>();
		VenueHireSystem s = new VenueHireSystem(venues, actionResults);

		// Scan from input for stuff to put into system s
		Scanner sc = null; // sc is now the input file.
		try {
			// args[0] is the first command line argument
			sc = new Scanner(new FileReader(args[0]));
			// set first argument as object to scan through
			while (sc.hasNext()) {
				String curLine = sc.nextLine();
				if (curLine.matches("^Venue\\s.*")) {
					System.out.println("Matched venue. Line is: " + curLine);
					Venue newVenue = venueParse(curLine);
					s.addVenue(s.venues, newVenue);

				} else if (curLine.matches("^Print\\s.*")) {
					// Print. after parsing which venue to print, do the
					// printing
					System.out.println("Matched Print. Line is: " + curLine);
					printParse(curLine);

				} else {
					// Action. after parsing and setting, get response and add
					// to actionResults list
					System.out.println("Matched else. Line is: " + curLine);
					// actionParse(curLine);

				}
			}
		} catch (FileNotFoundException e) {
		} finally {
			// once done with file, close to free memory
			if (sc != null)
				sc.close();
		}

		System.out.println("Scan finished");
	}

}

/*
 * UML Diagram (s) below 'Class Diagram
 * 
 * @startuml
 * 
 * 
 * VenueHireSystem o-- Action 
 * VenueHireSystem *-- Venue
 *  Venue *-- Room
 * 
 * Request<|-- Change
 *  Cancel<|-- Change
 * 
 * Action ..|> Request
 *  Action ..|> Cancel
 *   Action --> Room
 * 
 * DateData --* Room
 *  DateData *-- CustomDate
 *   skinparam classAttributeIconSize 0
 * 
 * class Room {
 *  -String name
 *  -String type
 *  -DateData availabilities +
 * <<constructor>> Room(name:String, type:String, availabilities:DateData) 
 * + * isAvailable(date:String) : Boolean 
 * + bookRoom(date:String) : String 
 * + * freeRoom(date:String) : String 
 * - setName(name: String) 
 * - setType(type: * String) + getName() : String + getType() : String 
 * }
 * 
 * class Venue {
 *  -List<Room> rooms 
 *  -String name 
 *  + <<constructor>> Venue(room: * List<Room>, name:String) 
 *  + isAvailable(date:String) : Boolean 
 *  + * bookRoom(date:String) : String 
 *  + freeRoom(date:String) : String
 *  -setName(name: String) 
 *  - setType(type: String) 
 * + getName() : String
 * + * getType() : String 
 * }
 * 
 * class Action { 
 * -String name 
 * -String type 
 * -int id 
 * -Calendar start
 * -Calendar end
 * +duration(start:CustomDate, end:CustomDate): int
 * + <<constructor>> Action() + setters() and * getters() 
 * }
 * 
 * class VenueHireSystem { 
 * -LinkedHashMap<String, Venues> venues 
 * -LinkedHashMap<Action, String> actionResults 
 * - scanInput() : * String 
 * - venueParse(input:String) 
 * - actionParse(input:String) -
 * printOutput(): String 
 * -setters() and +getters() 
 * + <<constructor>> VenueHireSystem(roomReq: List<Room>, name:String, type:String, id:int, dateRequired:String[])
 *  }
 * 
 * class DateData { 
 * -CustomDate[] bookedDates 
 * +<<constructor>> DateData()
 * +Boolean getDate() 
 * +isAvailable(date:CustomDate) 
 * }
 * 
 * class CustomDate { 
 * -String month 
 * -int day 
 * +equals() 
 * }
 * 
 * 
 * @enduml 'Use cases
 * 
 * @startuml :User: (Request reservation) User --> (Request)
 * 
 * User --> (Change)
 * 
 * User --> (Cancel)
 * 
 * @enduml
 * 
 */