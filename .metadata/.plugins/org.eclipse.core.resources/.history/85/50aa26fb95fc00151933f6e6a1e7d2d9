import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;



public class VenueHireSystem {
	private LinkedHashMap<String, Venue> venues;
	private LinkedHashMap<Integer, Action> actions; //notsureifnecessary
	//Use a list? keep numbered actions 0-max
	private LinkedList<String> actionOutput;

	/* CONSTRUCTORS */
	public VenueHireSystem() {
		this.venues = new LinkedHashMap<String, Venue>();
		this.actionOutput = new LinkedList<String>();
	}

	/* GETTERS AND SETTERS BELOW */
	public LinkedHashMap<String, Venue> getVenues() {
		return venues;
	}

	public void setVenues(LinkedHashMap<String, Venue> venues) {
		this.venues = venues;
	}

	public void addVenue(Venue v) {
		this.venues.put(v.getName(), v);
	}
	
	public Set<String> getVenueNames() {
		return this.venues.keySet();
	}

	public ArrayList<Venue> getVenueList() {
		ArrayList<Venue> l = new ArrayList<Venue>();
		for (String key : this.getVenueNames()) {
			l.add(this.getVenues().get(key));
		}
		return l;
	}

	/**
	 * @return the actions
	 */
	public LinkedHashMap<Integer, Action> getActions() {
		return actions;
	}

	/**
	 * @param actions the actions to set
	 */
	public void setActions(LinkedHashMap<Integer, Action> actions) {
		this.actions = actions;
	}

	/**
	 * @param actionOutput the actionOutput to set
	 */
	public LinkedList<String> getActionOutput() {
		return actionOutput;
	}

	public void setActionOutput(LinkedList<String> actionOutput) {
		this.actionOutput = actionOutput;
	}
	/*
	private void addActionResult(String result) {
		this.actionOutput.add(result);
	}
	*/
	/* ========= HELPER FUNCTIONS ========= */

	/* PARSER FUNCTIONS BELOW */
	private Venue venueParse(String venueString) {
		// Split into format: Venue <name> <roomname> <type>
		String[] tokens = venueString.split("\\s");
		Venue v = new Venue(tokens[1]); //initialise name, 0th token is identifier
		for (int  i = 2;  i < tokens.length; i += 2) {
			Room r = new Room(tokens[i], tokens[i+1]);
			v.addRoom(r);
		}
		return v;
	}
	/* 
	  # request <id> is from <month1>, <date1> to <month2>, <date2> for <number1> rooms of <type1>, etc.
		Change <id> <month1> <date1> <month2> <date2> <number1> <type1> <number2> <type2> . . .
		  # change reservation <id> to <month1>, <date1> to <month2>, <date2> with <number1> rooms of <type1>, etc.
		Cancel <id>
		  # cancel reservation <id> (if it exists) and free up rooms
	 * 
	 */
	private Action actionParse(String actionResultstring) {
		String[] tokens = actionResultstring.split("\\s");
		//put stuff in properly
		Action action = new Action(tokens[0], Integer.parseInt(tokens[1]));
		/*	
		 * Request <id> <month1> <date1> <month2> <date2> <number1> <type1> <number2> <type2> . . .
		 *		Request: id, may 26 to may 27, (how many, type 1)+
		 *		Change: id, may 26 to may 27, (how many, type 1)+
		 *		Cancel: id 
		 * */
		int dummy;
		if (tokens[0].equals("Request") || tokens[0].equals("Change") ) {
			action.setStart(tokens[2], Integer.parseInt(tokens[3]));
			action.setEnd(tokens[4], Integer.parseInt(tokens[5]));
			for (int  i = 6;  i < tokens.length; i += 2) {
				dummy = Integer.parseInt(tokens[i]);
				action.addRoomType(tokens[i+1], dummy);
			}
		} else if (tokens[0].equals("Cancel")) {
			for (Venue v : this.getVenueList()) {
				for (Room r : v.getRoomList()) {
					if (r.containsID(Integer.parseInt(tokens[1]))) {
						action = r.getBooking(Integer.parseInt(tokens[1])); 
					}
				}
			}
		}

		return action;
	}

	// Provides string containing venue that needs to be printed out
	private String printParse(String printString) {
		// TODO: determine return value -- String? what to push onto result queue
		Pattern p = Pattern.compile("^Print\\s(\\w+)");
		Matcher m = p.matcher(printString);
		m.find();
		for (String vName : this.venues.keySet()) {
			if (vName.equals(m.group(1))) { //not necessary, should only print existing venues
				return this.venues.get(vName).toString();
			}
		}
		return "Print rejected";
		// System.out.println(m.group(1)); //0th group is everything, 1st is
		// match 1
		// Write a Venue toString function
		/*
		 * for (Venue v: this.venues) { //with array. can use hashtable instead
		 * if (v.name.equals(m.group(1))) { String = venueOutput = v.toString()
		 * } }
		 */
		/*Print <name>*/

	}
	
	//Figure out what goes in here
	public String Parser(String input) {
		String output = "action processing did not work";
		if (input.matches("^Venue\\s.*")) {
			System.out.println("Matched venue. Line is: " + input);
			Venue newVenue = this.venueParse(input);
			this.addVenue(newVenue);
			String roomNames = newVenue.getRoomNames().toString();
			output = "Just added: " + newVenue.getName() + " " + roomNames;
			for (Room r : newVenue.getRoomList()) {
				output += " " + r.getType();
			}

			

		} else if (input.matches("^Print\\s.*")) {
			// Print. after parsing which venue to print, do the
			// printing
			System.out.println("Matched Print. Line is: " + input);
			this.printParse(input);

		} else {
			// Action. after parsing and setting, get response and add
			// to actionResults list
			System.out.println("Matched else. Line is: " + input);
			Action curAction = this.actionParse(input);
			switch (curAction.name) {
			case "Request":
				output = curAction.requestBooking(this);
				break;
			case "Cancel":
				output = curAction.cancelBooking(this);
				break;
			case "Change":
				output = curAction.changeBooking(this);
				break;
			default:
				break;
			}
			//Do stuff to get result
			//addActionOutput
		}	
		
		return output; //output string made up of all actionOutput
	}

	/* Print VenueHireSystem contents maybe not req'd anymore */

	/* PROCESS ACTION OBJECTS FROM PARSE */
	/*
	private String actionResult(Action actionToCheck) {
		return "dummy";
	} */

	/* RUNTIME EXECUTABLE CODE */
	public static void main(String[] args) {
		// Initialise system contents as empty lists
		test vhs = new test();
		// Scan from input for stuff to put into system s
		Scanner sc = null; // sc is now the input file.
		try {
			// args[0] is the first command line argument
			sc = new Scanner(new FileReader(args[0]));
			// set first argument as object to scan through
			while (sc.hasNext()) {
				System.out.println(vhs.Parser(sc.nextLine()) + "\n"); 

			}
		} catch (FileNotFoundException e) {
		} finally {
			// once done with file, close to free memory
			if (sc != null)
				sc.close();
		}

		System.out.println("Scan finished");
	}

}

/*
 * UML Diagram (s) below 'Class Diagram
 * 
 * @startuml
 * 
 * 
 * VenueHireSystem o-- Action 
 * VenueHireSystem *-- Venue
 *  Venue *-- Room
 * 
 * Request<|-- Change
 *  Cancel<|-- Change
 * 
 * Action ..|> Request
 *  Action ..|> Cancel
 *   Action --> Room
 * 
 * DateData --* Room
 *  DateData *-- CustomDate
 *   skinparam classAttributeIconSize 0
 * 
 * class Room {
 *  -String name
 *  -String type
 *  -DateData availabilities +
 * <<constructor>> Room(name:String, type:String, availabilities:DateData) 
 * + * isAvailable(date:String) : Boolean 
 * + bookRoom(date:String) : String 
 * + * freeRoom(date:String) : String 
 * - setName(name: String) 
 * - setType(type: * String) + getName() : String + getType() : String 
 * }
 * 
 * class Venue {
 *  -List<Room> rooms 
 *  -String name 
 *  + <<constructor>> Venue(room: * List<Room>, name:String) 
 *  + isAvailable(date:String) : Boolean 
 *  + * bookRoom(date:String) : String 
 *  + freeRoom(date:String) : String
 *  -setName(name: String) 
 *  - setType(type: String) 
 * + getName() : String
 * + * getType() : String 
 * }
 * 
 * class Action { 
 * -String name 
 * -String type 
 * -int id 
 * -Calendar start
 * -Calendar end
 * +duration(start:CustomDate, end:CustomDate): int
 * + <<constructor>> Action() + setters() and * getters() 
 * }
 * 
 * class VenueHireSystem { 
 * -LinkedHashMap<String, Venues> venues 
 * -LinkedList<String> actionOutput 
 * - scanInput() : * String 
 * - venueParse(input:String) 
 * - actionParse(input:String) -
 * printOutput(): String 
 * -setters() and +getters() 
 * + <<constructor>> VenueHireSystem(roomReq: List<Room>, name:String, type:String, id:int, dateRequired:String[])
 *  }
 * 
 * class DateData { 
 * -CustomDate[] bookedDates 
 * +<<constructor>> DateData()
 * +Boolean getDate() 
 * +isAvailable(date:CustomDate) 
 * }
 * 
 * class CustomDate { 
 * -String month 
 * -int day 
 * +equals() 
 * }
 * 
 * 
 * @enduml 'Use cases
 * 
 * @startuml :User: (Request reservation) User --> (Request)
 * 
 * User --> (Change)
 * 
 * User --> (Cancel)
 * 
 * @enduml
 * 
 */