import java.util.LinkedHashMap;
import java.util.Set;


public class Venue {
	private String name;
	private LinkedHashMap<String, Room> rooms;

	//	GETTERS AND SETTERS
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LinkedHashMap<String, Room> getRooms() {
		return rooms;
	}
	// Not sure if required
	public void setRooms(LinkedHashMap<String, Room> rooms) {
		this.rooms = rooms;
	}

	public Set<String> getRoomNames() {
		Set<String> keys = this.rooms.keySet(); 
		return keys; //keys will be in insertion order -> linkedhashmap structure
	}


	
	@Override
	public String toString() {
		String returnString = "";
		Set<String> keys = getRoomNames();
		for (String room : keys) {
			String roomString = this.name + " " + rooms.get(room).toString() + "\n";
			returnString += roomString;
		}
		return returnString;
		
	}

	//	Constructor

	public Venue (String name) {
		this.name = name;
		this.rooms = new LinkedHashMap<String, Room>();
	}


	//	HELPER METHODS
	
	public void addRoom(Room r ) {
		this.rooms.put(r.getName(), r);
	}
	
	public void delRoom(Room r ) {
		if (rooms.containsKey(r.getName())) {
			this.rooms.remove(r.getName());
		}
	}
	
	public boolean roomExists(String roomName) {
		return this.rooms.containsKey(roomName);
	} // TODO: check if version checking with Room object is required
	
	public void printRoomData() {
		System.out.println(this.toString());
	}


}

/*
 * 
 * @startuml
 * Venue *-- Room
 * DateData --* Room
 *  
 *  class Venue {
 *  -LinkedHashMap<String, Room> rooms 
 *  -String name 
 *  + <<constructor>> Venue(rooms: LinkedHashMap<String, Room>, name:String) 
 * + getName() : String
 * + getRoomNames() : String
 * + addRoom(rooms:LinkedHashMap, r:Room)
 * + delRoom(rooms:LinkedHashMap, r:Room)
 * + roomExists(r:Room)
 * + printRoomData(r:Room)
 * } 
 * 
 * class Room {
 *  -String name
 *  -String type
 *  -DateData bookedDates
 *  + <<constructor>> Room(name:String, type:String, availabilities:DateData) 
 * + * isAvailable(date:String) : Boolean 
 * + bookRoom(date:String) : String 
 * + * freeRoom(date:String) : String 
 * - setName(name: String) 
 * - setType(type: * String) + getName() : String + getType() : String 
 * }
 * 
 * class DateData { 
 * -Calendar[] bookedDates 
 * +<<constructor>> DateData()
 * +isAvailable(d:Calendar) 
 * +addDate(d:Calendar)
 * +removeDate(d:Calendar)
 * }
 * 
 * 
 * 

 * @enduml
 */