import java.util.HashMap;
import java.util.Map;

public class Search<E> {
	private Vertex<E> s;
	private Map<Vertex<E>, Integer> pathTable;
	public Search(Graph<E> G, Vertex<E> s)  { // Search for vertices connected to s
		this.s = s;
		this.pathTable = new HashMap<>();
		//do search in constructor -> use other public methods to access data from search
	}

	public Search(Graph<E> G, Vertex<E> src, Vertex<E> dest)  { // Search for path from src to dest
		this.s = s;
		this.pathTable = new HashMap<>();
		//do search in constructor -> use other public methods to access data from search
	}

	public boolean marked(Vertex<E> v) { //is v connected to s? // has this vertex been visited?
		return true;
	}

	public int count() { // how many vertices are connected to s ?
		return s.getConnectedEdges().size();
	}
}

/*
% java BreadthFirstPaths tinyCG.txt
(least recently added for BFS, most recently add-
0 to 0: 0
0 to 1: 0-1
ed for DFS). This difference leads to completely
0 to 2: 0-2
different views of the graph, even though all the
0 to 3: 0-2-3
0 to 4: 0-2-4
vertices and edges connected to the source are
0 to 5: 0-5
TODO Implement BFS to search through ALL components (for connected components)
TODO Find out how to use comparator in Priority queue for below
TODO Implement BFS in BFSPaths to find shortest path (priority queue)

*/