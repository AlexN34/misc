COMP2911 NOTES:


Employee.java

public class Employee {
    private String name;
    private int salary;
    
    public Employee (String name; int salary) {
        this.name = name; 
        this.salary = salary;
        //this -- implicit pointer to yourself
    }
    
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name; //this refers to current Employee object
    }
}

Manager.java

public class Manager extends Employee {
    private Calendar hireDate;

    public Manager (String name, int salary, Calendar hireDate) {
        //order of arguments is important, feed function args
        //correspondingly (includes Super)
        //without, implicitly calls. but can't call employee() no args (not
        //String, Calendar are classes ... naming convention. things
        // that are classes are more complex than basics.
          defined)
        super(name, salary);
        this.hireDate = hireDate;
    }
}


//getter setters, used to get and set values of private fields
// Tostring format: {name = Aneita, salary = 100}

//Current date and time
Calendar c = new GegorianCalendar();

//Specific date
Calendar c = new GregorianCalendar(2016,03,08);


//answers:

public boolean equals (Object o) {
    if (this == o) return true;
    if (o == null) return false;
    if  (this.getClass() != o.getClass()) //getClass replaces object with
                                            //actual thing entered
        return false;
    Employee e = (Employee) o; //Typecasting to employee
    return e.name.equals(this.name) && e.salary == this.salary;
            /*^ other thing passed in (e is o typecast as employee)
            -- compare other thing to THIS thing; not other way round*/
}

public boolean equals (Object o) {
    if (!super.equals(o) return false;
    Manager m = (Manager) o;
    return m.hireDate.equals(this.hireDate);
}

//try statement?!

public Employee clone() {
    try { //try this, if it doesn't work, then go to catch
        Employee e = (Employee) super.clone(); //what is super? object class
                            //object already has a clone method defined.
                            //BUT it gives type object, have to typecast
        return e;
    } catch (CloneNotSupportedException e) {
        return null;
    }
}

public Manager clone() {
        Manager m = (Manager) super.clone();
        m.hireDate = this.hireDate;
        return m;
}

//@override
/* .... */ -- signifies comment about method that overrides somethign else?

hiredate takes in timestamp; so tests will neverh ave equal managers

only check year, day etc

public class Employee implements Cloneable {
}
